[{"content":"왜 Github Pages + Hugo를 선택했나? # 혼자 참고할 블로그 이기 때문에 돈을 들이기엔 투머치고, 별도 서브 도메인을 제공하면서 없어질 염려가 없는 무료 호스팅 서비스를을 찾아보니 깃헙이 적당해 보였다. 정적 페이지 형태로 퍼블리쉬 해야 해서 글 작성시 이미지를 올리는데에 약간 귀찮은점이 있기는 하겠지만.. 그정도 불편함은 감수하기로 했다.\n일반적으로 Github Pages에는 Jekyll, Hexo, Hugo 등 정적 페이지 형태로 퍼블리쉬 해주는 프레임워크를 활용하는 경우가 다수이다. 나는 Go 에 최근 관심이 생겨 Go 기반의 Hugo를 선택했다. Hugo가 빌드 속도도 빠르고, 원하는 테마도 단번에 찾게되어 큰 고민없이 Hugo로 정착하게 되었다. Ruby를 사용하고 싶다면 Jekyll, Node를 사용하고 싶다면 Hexo를 사용하면 될 것 같다. 퍼포먼스 측면에서의 차이는 테스트해보지 못했는데, 블로그를 사용하면서 불편함이 생길 경우 다른 플랫폼도 고려해 볼 예정이다.\n로컬에서 Hugo 셋업하기 # 아래 모든 내용은 macOS 에서 진행되었습니다. 다른 OS에서의 설치 방법은 Hugo 공식 사이트를 참고해 주세요.\nHugo CLI 설치 # 이 포스트에서는 Homebrew를 활용한 설치 방법만을 다룹니다. 이외의 방법은 Hugo 공식 사이트를 참고해 주세요.\nHomebrew를 활용하여 Hugo CLI를 설치한다.\n$ brew install hugo $ which hugo /usr/local/bin/hugo 사이트 셋업 # ./blog 디렉토리에 신규 블로그를 생성하기 위해 아래 명령어를 입력한다. 명령어 실행되면 자동적으로 Hexo 구동을 위해 필요한 파일들로 구성된 폴더를 만들어 준다.\n$ hugo new site blog 신규 생성된 디렉토리에 들어가서 서버를 구동시킨다. 서버 구동 후에는 웹브라우저에서 http://localhost:1313 접속하여 블로그를 확인한다.\n$ hugo server -D # Draft 도 보여주도록 서버 구동 (Draft 미포함 원하면 -D 삭제) .... Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 폴더 구조 둘러보기 # Hugo는 기본적으로 아래와 같은 구조로 되어있다. 각 폴더 별 상세한 설명은 공식 홈페이지를 참고하면 된다.\n. |-- archetypes |-- content |-- static |-- themes |-- config.toml archetypes # CLI를 통해 새로운 화면을 만들 때 기본으로 들어가는 템플릿을 정의하는 공간이다. 기본 템플릿은 아래와 같이 생겼다. 테마마다 지원하는 필드들이 다르니, 필수 필드가 있다면 미리 정의해두면 시간을 절약할 수 있다.\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} draft: true --- content # 작성한 블로그 글이 저장되는 곳이다. Hexo 에서는 글을 \u0026ldquo;컨텐츠 섹션\u0026rdquo; 별로 관리하는데, content 아래에 생성된 각 폴더명이 \u0026ldquo;컨텐츠 섹션\u0026quot;의 이름이 된다. 예를 들어, content/blog, content/cheatsheet 라는 두개의 폴더가 있다면 해당 블로그의 컨텐츠 섹션은 \u0026ldquo;blog\u0026quot;와 \u0026ldquo;cheetsheet\u0026rdquo; 두가지 인 것이다.\n컨텐츠 섹션으로 나누는 이유는, 컨텐츠 종류별 렌더링 방식을 지정해주기 위함이다. 종류별 렌더링 참고 파일은 layouts/ 아래에 컨텐츠 섹션별로 관리하여 사용할 수 있다.\nstatic # 블로그 내에 필요한 정적 파일(직접 작성한 CSS/JS 파일, 로고 이미지 파일 등)을 넣는 곳이다. 이곳에 파일을 집어 넣어 두면 실제 Hugo를 활용해서 빌드한 후에 해당 파일들을 접근할 수 있다. static/img/image.png 로 업로드 하였다면 실제 블로그 안에서 참조할 때에는 img/image.png 형태로 불러오면 빌드 후에 정상 접근 가능하다.\nthemes # 적용할 테마 파일을 저장하는 곳이다. 해당 폴더 내에 테마별로 별도의 폴더를 만들어 관리하면 된다. themes 안에 있는 테마를 실제 적용하기 위해서는 config.toml 내에 지정을 해 주어야 한다. 지정 방법은 아래 테마 적용하기에서 다룰 예정이다.\n테마 적용하기 # Hugo의 테마는 Hugo Themes에서 확인할 수 있다. 원하는 테마를 하나 고르면 된다. 테마별로 설정 방법이 매우 상이하므로 각 테마의 위키를 꼼꼼히 참고하여야 한다.\n테마 관련 파일들은 [Hexo Root]/themes 아래에 위치하고 있으므로, themes 아래에 테마 레포지토리를 클론 혹은 submodule로 불러온 후 [Hexo Root]/config.toml 내에 아래와 같이 등록해 주면 된다.\n# 선택한 테마 명: toastygrape theme = \u0026#34;toastygrape\u0026#34; 실행해 보기 # 테마 설정까지 끝났다면 다시한번 서버를 구동해 보자. 만약 테마 데모 사이트와 다른점이 많다면, 활용할 테마의 위키를 참고하여 설정이 누락된 것은 없는지 확인해보자.\n$ hugo server -D # Draft 도 보여주도록 서버 구동 (Draft 미포함 원하면 -D 삭제) .... Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 첫 글 쓰기 # 글을 쓰기 위해서는 Hugo 디렉토리 안에서 new 명령어를 활용하는 방법과, contents/폴더 아래에 수동으로 파일을 생성해 주는 방법이 있다. 아무거나 편한 방법으로 해도 되지만, 시간을 매번 직접 입력하기 번거롭기 때문에 CLI를 활용해서 글을 생성해 보겠다.\n$ hugo new content/posts/my-first-post.md 생성된 마크다운 페이지를 방문하면 archetypes을 기반으로 디폴트 템플릿이 작성되어있는것을 볼 수 있다. 원하는 내용으로 변경 후 저장해 보자. 실제 발행을 진행할 것이기 때문에 draft를 false에서 true로 변경하였다.\n--- title: \u0026#34;My First Post\u0026#34; date: 2022-03-12T21:20:55+09:00 type: \u0026#34;posts\u0026#34; draft: false --- just another test 이렇게 하면 기본적인 Hexo 블로그 세팅은 완료다.\nGithub Pages 레포지토리에 자동 Publish 하기 # 로컬에서는 명령을 통해서 실시간으로 변경사항 확인이 가능하지만, 이 변경사항을 실제 Github Pages에 업로드 하기 위해서는 빌드 하고 -\u0026gt; 빌드한 파일을 레포에 업로드 하는 절차가 추가로 필요하다. 이 작업을 수동으로 하면 굉장히 번거롭다. 또한, 블로그 테마나 글 임시 저장을 위해 레포지토리 형태로 관리하고 싶은데, 이것을 Public 레포에서 하자니 부담스럽다.\n그래서 Private repo에서 블로그를 관리하고, 변경사항 commit 시에 자동으로 빌드 및 toastygrape/toastygrape.github.io 레포지토리에 업데이트 할 수 있도록 Github Action을 통해 구성하였다.\n   Github Actions를 통해 자동 빌드 및 푸시 작업을 수행하기 위해서 peaceiris/actions-gh-pages를 활용한다. 우선 .github/workflows/gh-pages.yml 파일을 생성하고, 아래 내용을 작성한다. Hugo 공식 홈페이지에 소개된 코드를 일부 수정하였다.\n비공개 레포지토리의 main 브랜치 내용을 가져와서 hugo --minify를 실행하여 ./public폴더 아래에 파일을 Publish 하고, toastygrape/toastygrape.github.io에 신규 발행한 파일들을 복사하였다.\nname: github pages on: push: branches: - main pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: false # Fetch Hugo themes (true OR recursive) fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.MY_TOKEN }} external_repository: toastygrape/toastygrape.github.io publish_branch: gh-pages publish_dir: ./public 작업용 비공개 레포지토리에서 공개 레포지토리로 파일을 Push하기 위해서는 권한이 필요하다. Github Actions에 권한을 부여하기 위해서 Personal Access Token을 활용한다. 토큰 발행을 위해 Personal access tokens 페이지로 이동하고, repo 전체와 workflow 권한을 가진 신규 토큰을 생성한다.\n   획득한 토큰은 비공개 레포지토리의 Settings \u0026gt; Secrets \u0026gt; Actions 아래에 등록한 후에 사용할 수 있다.\n   모든것이 세팅 완료 되었다면, 로컬에서 새로운 글을 쓰고 push를 해보자. 아래와 같이 Actions 아래에서 \u0026ldquo;Success\u0026quot;를 확인할 수 있다.   세팅은 완료 하였으니 이제 꾸준히 글만 올리면 된다!\n","date":"13 March 2022","permalink":"/posts/2022/03/13/hugo-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/","section":"Posts","summary":"왜 Github Pages + Hugo를 선택했나?","title":"Hugo 를 활용한 블로그 만들기"},{"content":"hi there! 👋\n","date":"13 March 2022","permalink":"/posts/2022/03/13/about-me/","section":"Posts","summary":"hi there!","title":"About me"},{"content":"just another test\n","date":"12 March 2022","permalink":"/posts/2022/03/12/my-first-post/","section":"Posts","summary":"just another test","title":"My First Post"}]